# ccr-tauri 项目 Justfile (Tauri 桌面应用构建脚本) 🚀🖥️

# 使用指南 📖
# - 在 ccr-tauri 目录执行：`just --list` 查看所有任务
# - 桌面开发：`just dev` 启动 Tauri 开发模式 (热重载)
# - WSL 优化：`just dev-wsl` WSL 环境优化启动
# - Web 调试：`just dev-web` 前端+后端,无桌面窗口 🌐
# - 构建桌面应用：`just build` 或 `just release`
# - 前端开发：`just ui-dev` 仅启动前端服务器
# - 完整检查：`just ci` 运行 CI 流程
# - 安装依赖：`just setup` 一键安装所有依赖
# - 前置要求：Rust 工具链 + Node.js 18+ 🦀📦

# 二进制名称
BIN := "ccr-tauri"
# 前端目录
UI_DIR := "src-ui"

# 跨平台 shell 配置 🧭
# Windows: 使用 PowerShell, Linux/macOS: 使用系统 bash
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]
set shell := ["bash", "-cu"]

# 默认任务：显示帮助菜单 ℹ️
default: help

# 显示所有可用任务 📜
help:
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║        CCR Tauri Justfile - 可用命令列表                 ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @just --list

# ═══════════════════════════════════════════════════════════
# 🚀 快速开始命令
# ═══════════════════════════════════════════════════════════

# 一键安装所有依赖 📦
setup:
  @echo "▶ 设置开发环境..."
  @echo "  步骤 1/3: 安装 Tauri CLI"
  just _install-tauri-cli
  @echo "  步骤 2/3: 检查 Rust 依赖"
  cargo check
  @echo "  步骤 3/3: 安装前端依赖"
  npm install --prefix {{UI_DIR}}
  @echo "✓ 环境设置完成！现在可以运行 'just dev' 启动开发模式"

# 内部任务：安装 Tauri CLI（跨平台）
_install-tauri-cli:
  cargo install tauri-cli --version "^2.0.0"

# 开发模式 (Tauri Dev) - 热重载支持 🔥
dev:
  @echo "▶ 启动 Tauri 开发模式..."
  @echo "  特性: Rust 后端 + Vue 前端热重载"
  @echo "  前端地址: http://localhost:5173"
  just _check-node-modules
  cargo tauri dev

# WSL 优化开发模式 (抑制图形警告) 🪟🐧
dev-wsl:
  @echo "▶ 启动 Tauri 开发模式 (WSL 优化)..."
  @echo "  特性: Rust 后端 + Vue 前端热重载"
  @echo "  前端地址: http://localhost:5173"
  @echo "  🔧 已抑制 libEGL/Mesa 警告"
  just _check-node-modules
  ./dev-wsl.sh

# Web 调试模式 (前端+后端,无桌面窗口) 🌐🔧
dev-web:
  @echo "▶ 启动 Web 调试模式..."
  @echo "  特性: 前端 + 后端 API 服务，无桌面窗口"
  @echo "  前端地址: http://localhost:5173"
  @echo "  后端 API: http://localhost:3030"
  @echo "  🌐 适用于 WSL/远程服务器调试"
  @echo ""
  just _check-node-modules
  just _start-web-servers

# Web 调试模式 (仅前端,临时方案) 🌐🚧
dev-web-frontend-only:
  @echo "▶ 启动 Web 调试模式 (仅前端)..."
  @echo "  特性: 前端界面预览，API 调用会失败"
  @echo "  前端地址: http://localhost:5173"
  @echo "  🚧 临时方案：后端 API 暂时不可用"
  @echo ""
  just _check-node-modules
  @echo "🎨 启动前端开发服务器..."
  @npm run dev --prefix {{UI_DIR}} &
  @sleep 3
  @echo ""
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║  🌐 Web 前端调试模式已启动                               ║"
  @echo "║                                                           ║"
  @echo "║  🎨 前端界面: http://localhost:5173                       ║"
  @echo "║  ⚠️  注意: API 功能不可用，仅用于 UI 测试                  ║"
  @echo "║                                                           ║"
  @echo "║  💡 用途:                                                  ║"
  @echo "║    - 测试界面布局和样式                                   ║"
  @echo "║    - 验证滚轮修复效果                                     ║"
  @echo "║    - 响应式设计测试                                       ║"
  @echo "║                                                           ║"
  @echo "║  🔧 完整功能请使用 'just dev-wsl'                         ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @echo ""

# 内部任务：启动前后端 Web 服务器（并发模式）
_start-web-servers:
  #!/usr/bin/env bash
  set -e
  
  # 清理旧的 PID 文件
  rm -f /tmp/ccr-web.pid /tmp/vite-dev.pid /tmp/ccr-web.log /tmp/vite-dev.log
  
  echo "📡 启动后端 API 服务器 (端口 3030)..."
  cd .. && nohup ccr web -p 3030 > /tmp/ccr-web.log 2>&1 & echo $! > /tmp/ccr-web.pid
  sleep 1
  
  echo "🎨 启动前端开发服务器 (端口 5173)..."
  nohup npm run dev --prefix {{UI_DIR}} > /tmp/vite-dev.log 2>&1 & echo $! > /tmp/vite-dev.pid
  sleep 3
  
  echo ""
  echo "╔═══════════════════════════════════════════════════════════╗"
  echo "║  🌐 Web 调试模式已启动                                   ║"
  echo "║                                                           ║"
  echo "║  🎨 前端界面: http://localhost:5173                       ║"
  echo "║  📡 后端 API: http://localhost:3030                       ║"
  echo "║                                                           ║"
  echo "║  💡 使用方法:                                              ║"
  echo "║    1. 在浏览器中打开 http://localhost:5173                ║"
  echo "║    2. F12 打开 DevTools 查看 Network 请求                 ║"
  echo "║    3. 前端调用后端 API 进行配置操作                       ║"
  echo "║                                                           ║"
  echo "║  📋 实时日志:                                              ║"
  echo "║    tail -f /tmp/ccr-web.log    (后端 API 日志)            ║"
  echo "║    tail -f /tmp/vite-dev.log   (前端构建日志)             ║"
  echo "║                                                           ║"
  echo "║  📊 进程状态:                                              ║"
  echo "║    ps aux | grep -E '(ccr web|vite)'                      ║"
  echo "║                                                           ║"
  echo "║  ⏹️  停止服务: just stop-web                              ║"
  echo "╚═══════════════════════════════════════════════════════════╝"
  echo ""
  
  # 显示启动状态
  if kill -0 $(cat /tmp/ccr-web.pid) 2>/dev/null; then
    echo "✅ 后端服务器启动成功 (PID: $(cat /tmp/ccr-web.pid))"
  else
    echo "❌ 后端服务器启动失败，查看日志: cat /tmp/ccr-web.log"
  fi
  
  if kill -0 $(cat /tmp/vite-dev.pid) 2>/dev/null; then
    echo "✅ 前端服务器启动成功 (PID: $(cat /tmp/vite-dev.pid))"
  else
    echo "❌ 前端服务器启动失败，查看日志: cat /tmp/vite-dev.log"
  fi
  
  echo ""
  echo "🌐 在浏览器中访问: http://localhost:5173"
  echo "💡 停止服务使用: just stop-web"

# 停止 Web 调试模式的所有服务 ⏹️
stop-web:
  @echo "▶ 停止 Web 调试服务..."
  @if [ -f "/tmp/ccr-web.pid" ]; then \
    kill $(cat /tmp/ccr-web.pid) 2>/dev/null || true; \
    rm -f /tmp/ccr-web.pid; \
    echo "  ✓ CCR Web 服务器已停止"; \
  fi
  @if [ -f "/tmp/vite-dev.pid" ]; then \
    kill $(cat /tmp/vite-dev.pid) 2>/dev/null || true; \
    rm -f /tmp/vite-dev.pid; \
    echo "  ✓ Vite 开发服务器已停止"; \
  fi
  @rm -f /tmp/ccr-web.log /tmp/vite-dev.log
  @pkill -f "ccr web" 2>/dev/null || true
  @pkill -f "vite.*5173" 2>/dev/null || true
  @echo "✓ 所有 Web 调试服务已停止"

# 查看 Web 调试模式服务状态 📊
web-status:
  @echo "▶ Web 调试服务状态..."
  @echo ""
  @if [ -f "/tmp/ccr-web.pid" ] && kill -0 $(cat /tmp/ccr-web.pid) 2>/dev/null; then \
    echo "✅ 后端 API 服务器 (PID: $(cat /tmp/ccr-web.pid))"; \
    echo "   📡 http://localhost:3030"; \
  else \
    echo "❌ 后端 API 服务器未运行"; \
  fi
  @if [ -f "/tmp/vite-dev.pid" ] && kill -0 $(cat /tmp/vite-dev.pid) 2>/dev/null; then \
    echo "✅ 前端开发服务器 (PID: $(cat /tmp/vite-dev.pid))"; \
    echo "   🎨 http://localhost:5173"; \
  else \
    echo "❌ 前端开发服务器未运行"; \
  fi
  @echo ""
  @echo "📊 端口监听状态:"
  @ss -tuln | grep -E "(3030|5173)" | awk '{print "   " $5 " → " $1}' || echo "   无相关端口监听"

# 查看 Web 调试日志 📋
web-logs:
  @echo "▶ Web 调试日志..."
  @echo ""
  @if [ -f "/tmp/ccr-web.log" ]; then \
    echo "📡 后端 API 日志 (最近 20 行):"; \
    echo "   文件: /tmp/ccr-web.log"; \
    tail -20 /tmp/ccr-web.log | sed 's/^/   /'; \
    echo ""; \
  fi
  @if [ -f "/tmp/vite-dev.log" ]; then \
    echo "🎨 前端开发日志 (最近 20 行):"; \
    echo "   文件: /tmp/vite-dev.log"; \
    tail -20 /tmp/vite-dev.log | sed 's/^/   /'; \
  fi

# 实时跟踪 Web 调试日志 📊
web-logs-follow:
  @echo "▶ 实时跟踪 Web 调试日志 (Ctrl+C 退出)..."
  @echo ""
  @if [ -f "/tmp/ccr-web.log" ] && [ -f "/tmp/vite-dev.log" ]; then \
    echo "同时跟踪前端和后端日志:"; \
    tail -f /tmp/ccr-web.log /tmp/vite-dev.log; \
  elif [ -f "/tmp/ccr-web.log" ]; then \
    echo "跟踪后端日志:"; \
    tail -f /tmp/ccr-web.log; \
  elif [ -f "/tmp/vite-dev.log" ]; then \
    echo "跟踪前端日志:"; \
    tail -f /tmp/vite-dev.log; \
  else \
    echo "❌ 未找到日志文件，请先运行 'just dev-web'"; \
  fi

# 内部任务：检查并安装前端依赖（跨平台）
_check-node-modules:
  npm install --prefix {{UI_DIR}}

# ═══════════════════════════════════════════════════════════
# 🏗️  构建命令
# ═══════════════════════════════════════════════════════════

# 调试构建 (Debug 模式) 🏗️
build:
  @echo "▶ 开始调试构建..."
  @echo "  后端: Rust Debug 模式"
  @echo "  前端: Vue 生产构建"
  cargo build
  @echo "✓ 调试构建完成 → target/debug/{{BIN}}"

# 发布构建 (Release 优化) - 生成安装包 ⚡
release:
  @echo "▶ 开始发布构建..."
  @echo "  模式: Release 优化 (LTO + 符号剥离)"
  @echo "  输出: 跨平台安装包"
  cargo tauri build
  @echo "✓ 发布构建完成"
  @echo "  安装包位置: target/release/bundle/"
  @ls -lh target/release/{{BIN}} 2>/dev/null | awk '{print "  二进制大小: " $$5}' || true

# 快速类型检查 (不生成可执行文件) 🩺
check:
  @echo "▶ 运行 Rust 类型检查..."
  cargo check
  @echo "✓ Rust 类型检查通过"

# ═══════════════════════════════════════════════════════════
# 🎨 前端开发命令
# ═══════════════════════════════════════════════════════════

# 安装前端依赖 📦
ui-install:
  @echo "▶ 安装前端依赖..."
  npm install --prefix {{UI_DIR}}
  @echo "✓ 前端依赖安装完成"

# 仅启动前端开发服务器 (无 Tauri) 🎨
ui-dev:
  @echo "▶ 启动前端开发服务器..."
  @echo "  地址: http://localhost:5173"
  @echo "  注意: 这只是前端预览，Tauri Commands 不可用"
  npm run dev --prefix {{UI_DIR}}

# 前端生产构建 📦
ui-build:
  @echo "▶ 构建前端生产版本..."
  npm run build --prefix {{UI_DIR}}
  @echo "✓ 前端构建完成 → {{UI_DIR}}/dist"

# 前端 TypeScript 类型检查 ✅
ui-check:
  @echo "▶ 检查前端 TypeScript 类型..."
  npx --prefix {{UI_DIR}} vue-tsc --noEmit
  @echo "✓ TypeScript 类型检查通过"

# 前端预览生产构建 👀
ui-preview:
  @echo "▶ 预览前端生产构建..."
  @if [ ! -d "{{UI_DIR}}/dist" ]; then \
    echo "  ⚠ 未找到构建产物，正在构建..."; \
    just ui-build; \
  fi
  npm run preview --prefix {{UI_DIR}}

# ═══════════════════════════════════════════════════════════
# ✅ 测试命令
# ═══════════════════════════════════════════════════════════

# 运行 Rust 测试 ✅
test:
  @echo "▶ 运行 Rust 测试套件..."
  cargo test
  @echo "✓ 所有测试通过"

# 运行所有测试 (包括忽略的测试) 🧪
test-all:
  @echo "▶ 运行完整测试套件..."
  cargo test -- --include-ignored
  @echo "✓ 完整测试通过"

# ═══════════════════════════════════════════════════════════
# ✨ 代码质量命令
# ═══════════════════════════════════════════════════════════

# Rust 代码格式化 ✨
fmt:
  @echo "▶ 格式化 Rust 代码..."
  cargo fmt
  @echo "✓ Rust 代码格式化完成"

# 检查 Rust 代码格式 (不修改文件) 🔍
fmt-check:
  @echo "▶ 检查 Rust 代码格式..."
  cargo fmt -- --check
  @echo "✓ Rust 代码格式符合规范"

# Rust 静态检查 (Clippy) ❗
clippy:
  @echo "▶ 运行 Clippy 静态检查..."
  @echo "  模式: 所有警告视为错误"
  cargo clippy --all-targets --all-features -- -D warnings
  @echo "✓ Clippy 检查通过"

# 完整代码检查 (Rust + 前端) 🔧
lint: fmt clippy ui-check
  @echo "✓ 代码质量检查全部通过"

# ═══════════════════════════════════════════════════════════
# 🚀 开发工作流命令
# ═══════════════════════════════════════════════════════════

# 快速开发循环 (检查 → 测试) ⚡
quick: check test
  @echo "✓ 开发验证完成"

# 完整 CI 流程 (格式检查 + Clippy + 测试 + 前端检查) 🎯
ci: fmt-check clippy test ui-check
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║            ✓ CI 流程全部通过                             ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"

# 发布前检查 (CI + 构建测试) 🚢
pre-release: ci
  @echo "▶ 执行发布前检查..."
  @echo "  步骤: 测试发布构建"
  just release
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║          ✓ 发布前检查全部通过                           ║"
  @echo "║          准备发布到生产环境                             ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"

# ═══════════════════════════════════════════════════════════
# 📚 文档命令
# ═══════════════════════════════════════════════════════════

# 构建 Rust 文档 (不包含依赖) 📚
doc:
  @echo "▶ 生成 Rust 文档..."
  cargo doc --no-deps
  @echo "✓ 文档生成完成"

# 构建并在浏览器中打开文档 🌐
doc-open:
  @echo "▶ 生成并打开 Rust 文档..."
  cargo doc --no-deps --open

# ═══════════════════════════════════════════════════════════
# 🧹 清理与维护命令
# ═══════════════════════════════════════════════════════════

# 清理 Rust 构建产物 🧹
clean:
  @echo "▶ 清理 Rust 构建产物..."
  cargo clean
  @echo "✓ Rust 构建清理完成"

# 清理前端构建产物 🧹
ui-clean:
  @echo "▶ 清理前端构建产物..."
  rm -rf {{UI_DIR}}/dist
  rm -rf {{UI_DIR}}/node_modules
  rm -f {{UI_DIR}}/package-lock.json
  @echo "✓ 前端构建清理完成"

# 深度清理 (Rust + 前端) 💣
deep-clean: clean ui-clean
  @echo "▶ 深度清理完成"
  @echo "  提示: 运行 'just setup' 重新安装依赖"

# ═══════════════════════════════════════════════════════════
# 🔧 实用工具命令
# ═══════════════════════════════════════════════════════════

# 显示版本信息 🏷️
version:
  @echo "▶ 版本信息"
  @echo "  Cargo.toml:"
  @grep '^version' Cargo.toml | head -1
  @echo "  package.json:"
  @grep '"version"' {{UI_DIR}}/package.json | head -1
  @echo "  tauri.conf.json:"
  @grep '"version"' tauri.conf.json | head -1

# 检查环境依赖 🔍
check-env:
  @echo "▶ 检查开发环境..."
  @echo "  Rust:"
  @rustc --version
  @cargo --version
  @echo "  Node.js:"
  @node --version
  @npm --version
  @echo "  Tauri CLI:"
  @if command -v cargo-tauri &> /dev/null; then \
    cargo tauri --version; \
  else \
    echo "  ⚠ 未安装 - 运行 'just install-tauri-cli' 安装"; \
  fi
  @echo "✓ 环境检查完成"

# 安装 Tauri CLI 🔧
install-tauri-cli:
  @echo "▶ 安装 Tauri CLI..."
  @echo "  版本: 2.x (最新稳定版)"
  cargo install tauri-cli --version "^2.0.0"
  @echo "✓ Tauri CLI 安装完成"
  @cargo tauri --version

# ═══════════════════════════════════════════════════════════
# 📦 智能打包命令（跨平台支持）
# ═══════════════════════════════════════════════════════════

# 🚀 智能打包 - 根据当前系统自动选择打包目标
package:
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║           📦 CCR Desktop 智能打包系统                    ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @echo ""
  just _detect-and-package

# 内部任务：检测系统并执行对应的打包
_detect-and-package:
  #!/usr/bin/env bash
  set -e
  
  OS_TYPE=$(uname -s)
  
  echo "🔍 检测当前系统: $OS_TYPE"
  echo ""
  
  case "$OS_TYPE" in
    Linux*)
      echo "🐧 检测到 Linux 系统"
      just package-linux
      ;;
    Darwin*)
      echo "🍎 检测到 macOS 系统"
      just package-macos
      ;;
    MINGW*|MSYS*|CYGWIN*)
      echo "🪟 检测到 Windows 系统"
      just package-windows
      ;;
    *)
      echo "❌ 未识别的系统: $OS_TYPE"
      echo "💡 请手动使用 'just package-linux'、'just package-macos' 或 'just package-windows'"
      exit 1
      ;;
  esac

# 🐧 Linux 打包 - 生成 .deb + .AppImage
package-linux:
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║              🐧 Linux 平台打包                            ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @echo ""
  @echo "📦 生成格式: .deb (Debian/Ubuntu) + .rpm (Fedora/RedHat)"
  @echo "🔧 优化: LTO + 符号剥离"
  @echo ""
  just _check-node-modules
  @echo "🎨 构建前端..."
  npm run build --prefix {{UI_DIR}}
  @echo ""
  @echo "🦀 构建 Tauri 应用..."
  cargo tauri build --bundles deb,rpm
  @echo ""
  @echo "✅ Linux 打包完成！"
  @echo ""
  just _show-linux-bundles

# 🍎 macOS 打包 - 生成 .app + .dmg
package-macos:
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║              🍎 macOS 平台打包                            ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @echo ""
  @echo "📦 生成格式: .app (应用包) + .dmg (安装镜像)"
  @echo "🔧 优化: LTO + 符号剥离"
  @echo ""
  just _check-node-modules
  @echo "🎨 构建前端..."
  npm run build --prefix {{UI_DIR}}
  @echo ""
  @echo "🦀 构建 Tauri 应用..."
  cargo tauri build --bundles app,dmg
  @echo ""
  @echo "✅ macOS 打包完成！"
  @echo ""
  just _show-macos-bundles

# 🪟 Windows 打包 - 生成 .msi + .exe
package-windows:
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║             🪟 Windows 平台打包                           ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @echo ""
  @echo "📦 生成格式: .msi (安装包) + .nsis (NSIS 安装程序)"
  @echo "🔧 优化: LTO + 符号剥离"
  @echo ""
  just _check-node-modules
  @echo "🎨 构建前端..."
  npm run build --prefix {{UI_DIR}}
  @echo ""
  @echo "🦀 构建 Tauri 应用..."
  cargo tauri build --bundles msi,nsis
  @echo ""
  @echo "✅ Windows 打包完成！"
  @echo ""
  just _show-windows-bundles

# 🌍 全平台打包 (需要交叉编译工具链)
package-all:
  @echo "╔═══════════════════════════════════════════════════════════╗"
  @echo "║           🌍 全平台打包（实验性）                        ║"
  @echo "╚═══════════════════════════════════════════════════════════╝"
  @echo ""
  @echo "⚠️  注意: 跨平台打包需要配置对应的工具链"
  @echo ""
  @echo "🔧 推荐方案:"
  @echo "  1. 在 Linux 上构建 Linux 包"
  @echo "  2. 在 macOS 上构建 macOS 包"
  @echo "  3. 在 Windows 上构建 Windows 包"
  @echo ""
  @echo "📋 或使用 GitHub Actions CI/CD 自动化构建"
  @echo ""
  just package

# 内部任务：显示 Linux 构建产物
_show-linux-bundles:
  #!/usr/bin/env bash
  echo "📦 构建产物位置:"
  echo ""
  
  BUNDLE_DIR="target/release/bundle"
  
  if [ -d "$BUNDLE_DIR/deb" ]; then
    echo "  📄 Debian 包 (.deb):"
    find "$BUNDLE_DIR/deb" -name "*.deb" -exec ls -lh {} \; | awk '{print "    → " $$9 " [" $$5 "]"}'
  fi
  
  if [ -d "$BUNDLE_DIR/appimage" ]; then
    echo "  📦 AppImage 包:"
    find "$BUNDLE_DIR/appimage" -name "*.AppImage" -exec ls -lh {} \; | awk '{print "    → " $$9 " [" $$5 "]"}'
  fi
  
  if [ -d "$BUNDLE_DIR/rpm" ]; then
    echo "  📦 RPM 包 (.rpm):"
    find "$BUNDLE_DIR/rpm" -name "*.rpm" -exec ls -lh {} \; | awk '{print "    → " $$9 " [" $$5 "]"}'
  fi
  
  echo ""
  echo "💡 安装方法:"
  echo "  Debian/Ubuntu: sudo dpkg -i ccr-desktop_*.deb"
  echo "  通用 Linux:    chmod +x ccr-desktop_*.AppImage && ./ccr-desktop_*.AppImage"

# 内部任务：显示 macOS 构建产物
_show-macos-bundles:
  #!/usr/bin/env bash
  echo "📦 构建产物位置:"
  echo ""
  
  BUNDLE_DIR="target/release/bundle"
  
  if [ -d "$BUNDLE_DIR/macos" ]; then
    echo "  🍎 macOS 应用包 (.app):"
    find "$BUNDLE_DIR/macos" -name "*.app" -type d -exec ls -ldh {} \; | awk '{print "    → " $$9}'
  fi
  
  if [ -d "$BUNDLE_DIR/dmg" ]; then
    echo "  💿 DMG 安装镜像:"
    find "$BUNDLE_DIR/dmg" -name "*.dmg" -exec ls -lh {} \; | awk '{print "    → " $$9 " [" $$5 "]"}'
  fi
  
  echo ""
  echo "💡 安装方法:"
  echo "  1. 双击打开 .dmg 文件"
  echo "  2. 拖动应用到 Applications 文件夹"
  echo "  3. 首次运行需右键点击「打开」(如未签名)"

# 内部任务：显示 Windows 构建产物
_show-windows-bundles:
  #!/usr/bin/env bash
  echo "📦 构建产物位置:"
  echo ""
  
  BUNDLE_DIR="target/release/bundle"
  
  if [ -d "$BUNDLE_DIR/msi" ]; then
    echo "  💾 MSI 安装包:"
    find "$BUNDLE_DIR/msi" -name "*.msi" -exec ls -lh {} \; | awk '{print "    → " $$9 " [" $$5 "]"}'
  fi
  
  if [ -d "$BUNDLE_DIR/nsis" ]; then
    echo "  📦 NSIS 安装包:"
    find "$BUNDLE_DIR/nsis" -name "*.exe" -exec ls -lh {} \; | awk '{print "    → " $$9 " [" $$5 "]"}'
  fi
  
  echo ""
  echo "💡 安装方法:"
  echo "  双击 .msi 文件运行安装程序"

# 查看构建产物 📦
list-bundles:
  @echo "▶ 构建产物列表"
  @if [ -d "target/release/bundle" ]; then \
    find target/release/bundle -type f \( -name "*.dmg" -o -name "*.app" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.msi" -o -name "*.rpm" \) -exec ls -lh {} \; | awk '{print "  " $$9 " (" $$5 ")"}'; \
  else \
    echo "  未找到构建产物，请先运行 'just package'"; \
  fi

# 统计代码行数 📊
loc:
  @echo "▶ 代码统计"
  @echo "  Rust 后端:"
  @find src -name "*.rs" | xargs wc -l | tail -1 | awk '{print "    " $$1 " 行"}'
  @echo "  Vue 前端:"
  @find {{UI_DIR}}/src -name "*.vue" -o -name "*.ts" | xargs wc -l 2>/dev/null | tail -1 | awk '{print "    " $$1 " 行"}' || echo "    0 行"
  @echo "  总计:"
  @(find src -name "*.rs"; find {{UI_DIR}}/src -name "*.vue" -o -name "*.ts" 2>/dev/null) | xargs wc -l 2>/dev/null | tail -1 | awk '{print "    " $$1 " 行"}' || echo "    统计中..."
