# CCR 配置文件示例 - 自动确认模式
# ~/.ccs_config.toml

# ⚙️ 全局设置
[settings]
# ⚡ 自动确认模式 - 跳过所有确认提示（便利功能）
#
# 📝 功能说明：
# 启用后，所有需要人工确认的操作将自动执行，无需手动输入 'y'
#
# 启用后，以下操作将不再需要确认，直接执行：
# - ccr delete <name>      → 直接删除配置，无确认
# - ccr import --replace   → 直接替换所有配置，无确认
# - ccr init --force       → 直接覆盖配置文件，无确认
# - ccr clean              → 直接清理备份文件，无确认
#
# ⚠️ 注意事项：
# - 这是用户便利性功能，不影响安全机制
# - 所有操作仍会自动备份
# - 所有操作仍会记录到历史文件
# - 仍由人类手动执行命令
#
# ✅ 建议用法：
# - CI/CD 管道中使用（避免交互阻塞）
# - 自动化脚本中使用
# - 批量操作时使用
#
# ⚠️ 谨慎使用：
# - 生产环境的主机上使用
# - 不熟悉命令时使用
# - 处理重要数据时使用
#
skip_confirmation = false  # 设置为 true 启用自动确认模式

# 🎨 TUI 主题 (预留字段)
# tui_theme = "dark"

# === 配置管理 ===

# 🎯 默认配置名称
default_config = "anthropic-official"

# ▶️ 当前激活的配置名称
current_config = "anthropic-official"

# === 配置节 ===

# 📦 Anthropic 官方 API
[anthropic-official]
description = "Anthropic Official API - 官方 Claude API"
base_url = "https://api.anthropic.com"
auth_token = "sk-ant-your-api-key-here"
model = "claude-sonnet-4-5-20250929"
small_fast_model = "claude-haiku-3-5-20241022"
provider = "anthropic"
provider_type = "official_relay"
account = "official"
tags = ["official", "stable", "primary"]

# 🔄 OpenRouter API
[openrouter-claude]
description = "OpenRouter - 多模型支持"
base_url = "https://openrouter.ai/api/v1"
auth_token = "sk-or-your-api-key-here"
model = "anthropic/claude-sonnet-4"
small_fast_model = "anthropic/claude-haiku-3.5"
provider = "openrouter"
provider_type = "official_relay"
account = "personal"
tags = ["relay", "multi-model", "backup"]

# 🤖 DeepSeek API
[deepseek-v3]
description = "DeepSeek V3 - 高性价比国产模型"
base_url = "https://api.deepseek.com"
auth_token = "sk-deepseek-your-key-here"
model = "deepseek-chat"
small_fast_model = "deepseek-chat"
provider = "deepseek"
provider_type = "third_party_model"
account = "free"
tags = ["domestic", "affordable", "experimental"]

# === 自动确认模式使用指南 ===
#
# 📖 什么是自动确认模式？
# - 跳过所有确认提示的便利功能
# - 所有需要确认的操作将自动执行
# - 不会影响备份、历史记录等安全机制
# - 仍由人类手动执行每个命令
#
# 🔧 如何启用？
# 1. 编辑此文件，设置 skip_confirmation = true
# 2. 保存文件
# 3. 所有 CCR 命令将自动跳过确认
#
# 💻 使用示例：
#
#    # 普通模式（需要确认）
#    ccr delete old-config
#    > 确认删除配置 'old-config'? (y/N)
#
#    # 自动确认模式（无需确认）
#    ccr delete old-config
#    > ⚡ 自动确认模式已启用，将跳过确认
#    > 步骤 3/3: 执行删除 (⚡ 自动确认模式)
#    > ✓ 配置 'old-config' 已删除
#
#    # 其他自动执行的命令
#    ccr clean -d 30                    # ⚡ 直接清理，无需确认
#    ccr import new.toml --replace      # ⚡ 直接替换，无需确认
#
# 🔀 与 --yes/-y 参数的关系：
#    - skip_confirmation: 全局配置，持久生效
#    - --yes/-y 参数: 单次命令，仅影响当前操作
#    - 优先级: 两者任一启用即可跳过确认
#
# 🛡️ 安全机制（自动确认模式下仍然保留）：
#    ✅ 所有操作仍会自动备份
#    ✅ 所有操作记录到历史文件 (~/.claude/ccr_history.json)
#    ✅ 界面会显示自动确认模式提示
#    ✅ 可以随时关闭自动确认模式
#
# 📋 最佳实践：
#    ✅ DO: 在 Docker 容器中使用
#    ✅ DO: 在 CI/CD 管道中使用
#    ✅ DO: 在自动化脚本中使用
#    ✅ DO: 备份重要数据后再启用
#
#    ⚠️ CAUTION: 在生产主机上谨慎使用
#    ⚠️ CAUTION: 不熟悉命令时谨慎使用
#    ⚠️ CAUTION: 处理重要数据时注意备份
#
# 💡 替代方案：
# 如果只是偶尔需要跳过确认，建议使用 --yes/-y 参数：
#    ccr delete test-config --yes
#    ccr delete test-config -y
# 这样更安全，不会影响其他操作
#
# 🆚 CCR vs 官方 Claude Code：
# CCR的skip_confirmation ≠ Claude Code的--dangerously-skip-permissions
#
# - CCR自动确认模式：
#   * 跳过人工确认提示
#   * 仍由人类手动执行命令
#   * 保留所有安全机制（备份、历史）
#   * 用于提升操作效率
#
# - Claude Code YOLO模式：
#   * 允许AI自主执行危险操作
#   * AI可以无人监督下工作
#   * 移除所有权限检查
#   * 用于AI代理自主工作
