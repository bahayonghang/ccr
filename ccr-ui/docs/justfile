# CCR UI Documentation Justfile
# 快速构建和管理 CCR UI 项目文档的命令集合

# 默认命令 - 显示帮助信息
default:
    @just --list

# 检查依赖是否已安装
_check-deps:
    #!/usr/bin/env bash
    if [ ! -d "node_modules" ]; then
        echo "❌ 依赖未安装，正在自动安装..."
        npm install
        echo "✅ 依赖安装完成！"
    fi

# 安装依赖
install:
    @echo "📦 安装 CCR UI 文档依赖..."
    npm install

# 启动开发服务器
dev: _check-deps
    @echo "🚀 启动 CCR UI 文档开发服务器..."
    @echo "📝 访问 http://localhost:5173"
    npm run dev

# 构建生产版本
build: _check-deps
    @echo "🏗️  构建 CCR UI 文档生产版本..."
    npm run build
    @echo "✅ 构建完成！输出目录: .vitepress/dist"

# 预览生产构建
preview: build
    @echo "👀 预览 CCR UI 文档生产版本..."
    @echo "📝 访问 http://localhost:4173"
    npm run preview

# 服务生产构建
serve: build
    @echo "🌐 服务 CCR UI 文档生产版本..."
    @echo "📝 访问 http://localhost:4173"
    npm run serve

# 清理构建文件和缓存
clean:
    @echo "🧹 清理 CCR UI 文档构建文件..."
    rm -rf .vitepress/dist
    rm -rf .vitepress/cache
    rm -rf node_modules/.cache
    @echo "✅ 清理完成！"

# 完全清理(包括 node_modules)
clean-all: clean
    @echo "🧹 完全清理 CCR UI 文档..."
    rm -rf node_modules
    @echo "✅ 完全清理完成！"

# 重新安装依赖
reinstall: clean-all install
    @echo "✅ CCR UI 文档重新安装完成！"

# 检查安全漏洞
audit:
    @echo "🔍 检查 CCR UI 文档安全漏洞..."
    npm audit

# 修复安全漏洞(非破坏性)
audit-fix:
    @echo "🔧 修复 CCR UI 文档安全漏洞..."
    npm audit fix

# 更新依赖到最新版本
update:
    @echo "⬆️  更新 CCR UI 文档依赖..."
    npm update
    @echo "✅ 更新完成！"

# 检查过期的依赖
outdated:
    @echo "📊 检查 CCR UI 文档过期依赖..."
    npm outdated

# 快速重建(清理后重新构建)
rebuild: clean build
    @echo "✅ CCR UI 文档重建完成！"

# 验证构建(构建并检查输出)
verify: build
    @echo "✅ 验证 CCR UI 文档构建结果..."
    @ls -lh .vitepress/dist
    @echo ""
    @echo "📊 文件数量统计:"
    @find .vitepress/dist -type f | wc -l
    @echo ""
    @echo "💾 总大小:"
    @du -sh .vitepress/dist

# 开发环境完整设置
setup: install
    @echo "🎉 CCR UI 文档开发环境设置完成！"
    @echo ""
    @echo "可用命令:"
    @echo "  just dev      - 启动开发服务器"
    @echo "  just build    - 构建生产版本"
    @echo "  just preview  - 预览生产版本"
    @echo "  just serve    - 服务生产版本"
    @echo ""

# 生产部署准备
deploy: clean build verify
    @echo "🚀 CCR UI 文档生产部署准备完成！"
    @echo "📦 部署目录: .vitepress/dist"

# 格式化 justfile
fmt:
    @echo "✨ 格式化 CCR UI 文档 justfile..."
    just --fmt --unstable

# 快速开发 - 检查依赖并启动开发服务器
quick-dev: dev

# 快速部署 - 完整的部署流程
quick-deploy: clean install build verify
    @echo "🚀 CCR UI 文档快速部署完成！"

# 健康检查 - 检查项目状态
health:
    #!/usr/bin/env bash
    echo "🏥 CCR UI 文档项目健康检查..."
    echo ""
    echo "📦 Node.js 版本:"
    if command -v node &> /dev/null; then
        node --version
    else
        echo "❌ Node.js 未安装"
    fi
    echo ""
    echo "📦 npm 版本:"
    if command -v npm &> /dev/null; then
        npm --version
    else
        echo "❌ npm 未安装"
    fi
    echo ""
    echo "📁 项目目录:"
    pwd
    echo ""
    echo "📊 依赖状态:"
    if [ -d "node_modules" ]; then
        echo "✅ 依赖已安装"
        if [ -f "node_modules/.bin/vitepress" ]; then
            echo "✅ VitePress 已安装"
        else
            echo "⚠️  VitePress 未找到，尝试重新安装"
        fi
    else
        echo "❌ 依赖未安装 - 运行 'just install' 或 'just dev'"
    fi
    echo ""
    echo "🏗️  构建状态:"
    if [ -d ".vitepress/dist" ]; then
        echo "✅ 已构建"
        echo "   文件数: $(find .vitepress/dist -type f | wc -l)"
    else
        echo "❌ 未构建 - 运行 'just build'"
    fi

# 显示项目信息
info:
    #!/usr/bin/env bash
    echo "📋 CCR UI 文档项目信息"
    echo "========================"
    echo "项目名称: CCR UI Documentation"
    echo "文档引擎: VitePress"
    echo "开发端口: 5173"
    echo "预览端口: 4173"
    echo "构建目录: .vitepress/dist"
    echo ""
    echo "📚 文档结构:"
    echo "  - backend/     后端文档"
    echo "  - frontend/    前端文档"
    echo "  - guide/       用户指南"
    echo ""
    if [ -f "package.json" ]; then
        echo "📦 主要依赖版本:"
        if [ -d "node_modules" ]; then
            if command -v jq &> /dev/null; then
                jq -r '.dependencies | to_entries | .[] | "  - \(.key): \(.value)"' package.json 2>/dev/null || \
                echo "  运行 'npm list --depth=0' 查看详细信息"
            else
                echo "  运行 'npm list --depth=0' 查看详细信息"
            fi
        else
            echo "  ⚠️  依赖未安装"
        fi
        echo ""
    fi